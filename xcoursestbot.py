import os
import logging
import random
import psycopg2
from psycopg2 import OperationalError, IntegrityError
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from urllib.parse import urlparse
from contextlib import contextmanager
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from datetime import datetime
from aiogram.enums import ParseMode 
from aiogram.types import (
    Message, 
    CallbackQuery, 
    ReplyKeyboardRemove,
    InlineKeyboardMarkup  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
)
from aiogram.utils.media_group import MediaGroupBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ü–∞—Ä—Å–∏–Ω–≥ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
parsed_db = urlparse(DATABASE_URL)

class Database:
    def __init__(self):
        self.conn = None
        self._connect()
        self._init_tables()
        
    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
        self.conn = psycopg2.connect(
            dbname=parsed_db.path[1:],
            user=parsed_db.username,
            password=parsed_db.password,
            host=parsed_db.hostname,
            port=parsed_db.port,
            sslmode='require'
        )
        self.conn.autocommit = False

    def _init_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        with self.conn.cursor() as cursor:
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,
                        full_name TEXT NOT NULL,
                        current_course INTEGER,
                        registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS courses (
                        course_id SERIAL PRIMARY KEY,
                        title TEXT UNIQUE NOT NULL,
                        description TEXT,
                        media_id TEXT
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS modules (
                        module_id SERIAL PRIMARY KEY,
                        course_id INTEGER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE,
                        title TEXT NOT NULL,
                        media_id TEXT
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS tasks (
                        task_id SERIAL PRIMARY KEY,
                        module_id INTEGER NOT NULL REFERENCES modules(module_id) ON DELETE CASCADE,
                        title TEXT NOT NULL,
                        content TEXT NOT NULL,
                        file_id TEXT,
                        file_type VARCHAR(10)
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS submissions (
                        submission_id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
                        task_id INTEGER NOT NULL REFERENCES tasks(task_id) ON DELETE CASCADE,
                        status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'accepted', 'rejected')),
                        score INTEGER CHECK(score BETWEEN 0 AND 100),
                        submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        file_id TEXT,
                        content TEXT
                    )''')

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                cursor.execute('''
                    ALTER TABLE tasks 
                    ADD COLUMN IF NOT EXISTS file_type VARCHAR(10)
                ''')

                self.conn.commit()
                
            except Exception as e:
                self.conn.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
                raise

    @contextmanager
    def cursor(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ—Ä–æ–º"""
        cursor = None
        try:
            cursor = self.conn.cursor()
            yield cursor
            self.conn.commit()
        except Exception as e:
            self.conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise
        finally:
            if cursor:
                cursor.close()

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.conn and not self.conn.closed:
            self.conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)
db = Database()

class Form(StatesGroup):
    full_name = State()
    course_selection = State()
    waiting_for_solution = State()

class AdminForm(StatesGroup):
    add_course_title = State()
    add_course_description = State()
    add_course_media = State()
    add_module_title = State()
    add_module_media = State()
    add_task_title = State()
    add_task_content = State()
    add_task_media = State()
    delete_course = State()

def main_menu() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    # –î–ª—è Reply-–∫–Ω–æ–ø–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    builder.adjust(2)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    return builder.as_markup(
        resize_keyboard=True,    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
        one_time_keyboard=False  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π
    )
    
def task_keyboard(task_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"submit_{task_id}")
    builder.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"retry_{task_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é", callback_data=f"back_to_module_{task_id}")
    builder.adjust(1)
    return builder.as_markup()

def task_keyboard(task_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", 
        callback_data=f"submit_{task_id}"  # –§–æ—Ä–º–∞—Ç: "submit_123"
    )
    builder.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"retry_{task_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é", callback_data=f"back_to_module_{task_id}")
    builder.adjust(1)
    return builder.as_markup()
    
def cancel_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    return builder.as_markup()

def support_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"tg://user?id={ADMIN_ID}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data
    builder.adjust(1)
    return builder.as_markup()

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("submit_"))
async def handle_submit_solution(callback: CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split("_")[1])
        await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª):")
        await state.set_state(TaskStates.waiting_for_solution)
        await state.update_data(task_id=task_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"Submit error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è")
        
@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    text = (
        "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
        "1. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "2. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏"
    )
    await message.answer(text, reply_markup=support_keyboard())

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    with db.cursor() as cursor:
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (message.from_user.id,))
        user = cursor.fetchone()
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[1]}!", 
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            reply_markup=main_menu()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "üìù –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û. "
            "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –º–æ–≥ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.full_name)

@dp.message(Form.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)")
        return
    
    try:
        with db.cursor() as cursor:
            cursor.execute(
                "INSERT INTO users (user_id, full_name) VALUES (%s, %s)",
                (message.from_user.id, message.text)
            )
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())
        await state.clear()
    except IntegrityError:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await state.clear()

async def handle_media(message: Message):
    if message.photo:
        return {'type': 'photo', 'file_id': message.photo[-1].file_id}
    elif message.document:
        return {'type': 'document', 'file_id': message.document.file_id}
    return None

def courses_kb():
    with db.cursor() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=f"üìò {course[1]}", 
            callback_data=f"course_{course[0]}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == "üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
async def show_courses(message: types.Message):
    with db.cursor() as cursor:
        cursor.execute(
            """SELECT c.title 
            FROM users u
            LEFT JOIN courses c ON u.current_course = c.course_id 
            WHERE u.user_id = %s""", 
            (message.from_user.id,)
        )
        current_course = cursor.fetchone()
    
    text = "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –º–æ–¥—É–ª–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏. –í—ã–ø–æ–ª–Ω—è–π –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! üöÄ \n\n"
    if current_course and current_course[0]:
        text += f"üéØ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_course[0]}\n\n"
    text += "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    
    await message.answer(text, reply_markup=courses_kb())

@dp.callback_query(F.data.startswith("course_"))
async def select_course(callback: types.CallbackQuery):
    try:
        course_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        with db.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET current_course = %s WHERE user_id = %s",
                (course_id, user_id)
            )
            cursor.execute(
                "SELECT title, media_id FROM courses WHERE course_id = %s",
                (course_id,)
            )
            course = cursor.fetchone()
        
        text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:"
        kb = modules_kb(course_id)
        
        if course[1]:
            await callback.message.delete()
            await callback.message.answer_photo(course[1], caption=text, reply_markup=kb)
        else:
            await callback.message.edit_text(text, reply_markup=kb)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞")

def modules_kb(course_id: int):
    try:
        with db.cursor() as cursor:
            cursor.execute(
                "SELECT module_id, title FROM modules WHERE course_id = %s",
                (course_id,)
            )
            modules = cursor.fetchall()
        
        builder = InlineKeyboardBuilder()
        
        if modules:
            for module in modules:
                builder.button(
                    text=f"üìÇ {module[1]}",
                    callback_data=f"module_{module[0]}"
                )
        else:
            builder.button(
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π", 
                callback_data="no_modules"
            )
            
        builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses")
        builder.adjust(1)
        
        return builder.as_markup()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π: {e}")
        return InlineKeyboardBuilder().as_markup()

@dp.callback_query(F.data.startswith("task_"))
async def task_selected_handler(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT 
                    t.title, 
                    t.content, 
                    t.file_id,
                    t.file_type,
                    COALESCE(s.status, 'not_attempted') as status,
                    s.score
                FROM tasks t
                LEFT JOIN submissions s 
                    ON s.task_id = t.task_id 
                    AND s.user_id = %s
                WHERE t.task_id = %s
                ORDER BY s.submitted_at DESC
                LIMIT 1
            ''', (user_id, task_id))
            task_data = cursor.fetchone()

        if not task_data:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        title, content, file_id, file_type, status, score = task_data
        
        text = f"üìù <b>{title}</b>\n\n{content}"
        
        # –°—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–∏—è
        status_text = {
            'pending': "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            'accepted': "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ",
            'rejected': "‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏",
            'not_attempted': "üö´ –ù–µ –Ω–∞—á–∞—Ç–æ"
        }.get(status, "")
        
        if status_text:
            text += f"\n\n–°—Ç–∞—Ç—É—Å: {status_text}"
            if score is not None:
                text += f"\n–û—Ü–µ–Ω–∫–∞: {score}/100"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
        try:
            if file_id and file_type:
                if file_type == 'photo':
                    await callback.message.answer_photo(
                        file_id, 
                        caption=text,
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await callback.message.answer_document(
                        file_id,
                        caption=text,
                        parse_mode=ParseMode.HTML
                    )
            else:
                await callback.message.answer(
                    text, 
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
            await callback.message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                parse_mode=ParseMode.HTML
            )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.edit_reply_markup(
            reply_markup=task_keyboard(task_id)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è")

@dp.callback_query(F.data.startswith("module_"))
async def module_selected(callback: types.CallbackQuery):
    try:
        module_id = int(callback.data.split("_")[1])
        
        with db.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
            cursor.execute(
                "SELECT course_id, title FROM modules WHERE module_id = %s",
                (module_id,)
            )
            module_data = cursor.fetchone()
            
            if not module_data:
                await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
            cursor.execute(
                "SELECT task_id, title FROM tasks WHERE module_id = %s",
                (module_id,)
            )
            tasks = cursor.fetchall()

        builder = InlineKeyboardBuilder()
        
        if tasks:
            for task in tasks:
                builder.button(
                    text=f"üìù {task[1]}", 
                    callback_data=f"task_{task[0]}"
                )
            builder.button(
                text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º", 
                callback_data=f"back_to_modules_{module_data[0]}"
            )
            builder.adjust(1)
            
            await callback.message.edit_text(
                f"üìÇ –ú–æ–¥—É–ª—å: {module_data[1]}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

class TaskStates(StatesGroup):
    waiting_for_solution = State()

@dp.callback_query(F.data.startswith("back_to_module_"))
async def back_to_module(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    
    with db.cursor() as cursor:
        cursor.execute('''
            SELECT m.module_id 
            FROM tasks t
            JOIN modules m ON t.module_id = m.module_id
            WHERE t.task_id = %s
        ''', (task_id,))
        result = cursor.fetchone()
        if not result:
            await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        module_id = result[0]
    
    await module_selected(callback, module_id)
    
async def module_selected(callback: CallbackQuery, module_id: int):
    try:
        with db.cursor() as cursor:
            cursor.execute(
                "SELECT course_id, title FROM modules WHERE module_id = %s",
                (module_id,)
            )
            module_data = cursor.fetchone()
            
            cursor.execute(
                "SELECT task_id, title FROM tasks WHERE module_id = %s",
                (module_id,)
            )
            tasks = cursor.fetchall()

        builder = InlineKeyboardBuilder()
        
        if tasks:
            for task in tasks:
                builder.button(
                    text=f"üìù {task[1]}", 
                    callback_data=f"task_{task[0]}"
                )
            builder.button(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", 
                callback_data=f"back_to_course_{module_data[0]}"
            )
            builder.adjust(1)
            
            await callback.message.edit_text(
                f"üìÇ –ú–æ–¥—É–ª—å: {module_data[1]}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")


### 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ###
@dp.callback_query(F.data.startswith("retry_"))
async def retry_submission(callback: CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT submission_id FROM submissions
                WHERE user_id = %s AND task_id = %s AND status = 'rejected'
                ORDER BY submitted_at DESC LIMIT 1
            ''', (user_id, task_id))
            if not cursor.fetchone():
                await callback.answer("‚ùå –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

            cursor.execute('''
                UPDATE submissions 
                SET 
                    status = 'pending',
                    score = NULL,
                    submitted_at = NOW()
                WHERE user_id = %s AND task_id = %s
            ''', (user_id, task_id))
        
        await callback.message.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
        await state.set_state(TaskStates.waiting_for_solution)
        await state.update_data(task_id=task_id)
        await callback.answer()

    except Exception as e:
        logger.error(f"Retry submission error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")

### 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏–π ###
@dp.message(TaskStates.waiting_for_solution, F.content_type.in_({'text', 'document', 'photo'}))
async def process_solution(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get('task_id')
    user_id = message.from_user.id
    
    if not task_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        await state.clear()
        return

    try:
        file_ids = []
        content = None
        
        if message.content_type == 'text':
            content = message.html_text
        elif message.photo:
            file_ids = [f"photo:{message.photo[-1].file_id}"]
        elif message.document:
            file_ids = [f"doc:{message.document.file_id}"]

        if not content and not file_ids:
            await message.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª")
            return

        with db.cursor() as cursor:
            cursor.execute('''
                INSERT INTO submissions 
                (user_id, task_id, content, file_id, status, submitted_at) 
                VALUES (%s, %s, %s, %s, 'pending', NOW())
                RETURNING submission_id
            ''', (user_id, task_id, content, ",".join(file_ids) if file_ids else None))
            
            submission_id = cursor.fetchone()[0]

        await message.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        await notify_admin(submission_id, user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞

    except psycopg2.Error as e:
        logger.error(f"Database error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await state.clear()
@dp.message(TaskStates.waiting_for_solution, F.content_type.in_({'text', 'document', 'photo'}))
async def process_solution(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data['task_id']
    user_id = message.from_user.id
    
    try:
        file_ids = []
        content = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.content_type == 'text':
            content = message.text
        elif message.photo:
            file_ids = [f"photo:{photo.file_id}" for photo in message.photo]
        elif message.document:
            file_ids = [f"doc:{message.document.file_id}"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if not content and not file_ids:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with db.cursor() as cursor:
            cursor.execute(
                """INSERT INTO submissions 
                (user_id, task_id, submitted_at, file_id, content)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING submission_id""",
                (
                    user_id,
                    task_id,
                    datetime.now(),
                    ",".join(file_ids) if file_ids else None,
                    content
                )
            )
            submission_id = cursor.fetchone()[0]

        await message.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        await notify_admin(submission_id, task_id, user_id)

    except IntegrityError as e:
        logger.error(f"Integrity error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è")
    except OperationalError as e:
        logger.error(f"Database connection error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    finally:
        await state.clear()

async def send_media_with_caption(file_type: str, file_id: str, caption: str, keyboard: InlineKeyboardMarkup):
    try:
        if file_type == "doc":
            await bot.send_document(
                ADMIN_ID,
                document=file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await bot.send_photo(
                ADMIN_ID,
                photo=file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.error(f"Error sending media: {e}")

async def notify_admin(submission_id: int, user_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT s.content, s.file_id, u.full_name, t.title 
                FROM submissions s
                JOIN users u ON s.user_id = u.user_id
                JOIN tasks t ON s.task_id = t.task_id
                WHERE s.submission_id = %s
            ''', (submission_id,))
            
            submission_data = cursor.fetchone()
            if not submission_data:
                return

            text = (
                f"üì¨ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ (#{submission_id})\n"
                f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {submission_data[2]}\n"
                f"üìö –ó–∞–¥–∞–Ω–∏–µ: {submission_data[3]}\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
            if submission_data[1]:
                files = submission_data[1].split(',')
                media_group = MediaGroupBuilder(caption=text)
                
                for file in files:
                    if file.startswith('photo:'):
                        media_group.add_photo(file[6:])
                    elif file.startswith('doc:'):
                        media_group.add_document(file[4:])
                
                await bot.send_media_group(ADMIN_ID, media=media_group.build())
            else:
                await bot.send_message(ADMIN_ID, text)

    except Exception as e:
        logger.error(f"Notification error: {str(e)}", exc_info=True)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_kb = InlineKeyboardBuilder()
        admin_kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{task_id}_{user_id}")
        admin_kb.button(text="‚ùå –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ–∫", callback_data=f"reject_{task_id}_{user_id}")
        admin_kb.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É", url=f"tg://user?id={user_id}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            if file_ids:
                files = file_ids.split(',')
                media_group = MediaGroupBuilder()
                first_media_sent = False

                for file in files:
                    file_type, file_id = file.split(":", 1)
                    
                    if not first_media_sent:
                        await send_media_with_caption(
                            file_type, 
                            file_id, 
                            text, 
                            admin_kb.as_markup()
                        )
                        first_media_sent = True
                    else:
                        if file_type == "doc":
                            media_group.add_document(file_id)
                        else:
                            media_group.add_photo(file_id)

                if len(files) > 1:
                    await bot.send_media_group(ADMIN_ID, media=media_group.build())
            else:
                await bot.send_message(
                    ADMIN_ID,
                    text,
                    reply_markup=admin_kb.as_markup(),
                    parse_mode=ParseMode.MARKDOWN
                )

    except Exception as e:
        logger.error(f"Notification error: {e}")
        await bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task_id}\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: {user_id}\n"
            f"–û—à–∏–±–∫–∞: {str(e)[:200]}"
        )

@dp.callback_query(F.data.startswith("accept_") | F.data.startswith("reject_"))
async def handle_submission_review(callback: types.CallbackQuery):
    try:
        action, task_id, user_id = callback.data.split('_')
        task_id = int(task_id)
        user_id = int(user_id)

        new_status = "accepted" if action == "accept" else "rejected"

        with db.cursor() as cursor:
            cursor.execute(
                "UPDATE submissions SET status = %s WHERE task_id = %s AND user_id = %s",
                (new_status, task_id, user_id)
            )
            
            cursor.execute(
                "SELECT title FROM tasks WHERE task_id = %s",
                (task_id,)
            )
            task_title = cursor.fetchone()[0]

        user_message = (
            f"üì¢ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é \"{task_title}\" "
            f"{'–ø—Ä–∏–Ω—è—Ç–æ ‚úÖ' if action == 'accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå'}."
        )
        await bot.send_message(user_id, user_message)
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await callback.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

### BLOCK 4: ADMIN PANEL HANDLERS ###

def main_menu() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±–µ–∑ callback_data
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    builder.adjust(2)
    
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=False
    )

def admin_menu() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    
    admin_buttons = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üìù –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å",
        "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å",
        "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "üîô –ù–∞–∑–∞–¥"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    for button_text in admin_buttons:
        builder.button(text=button_text)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:
    # –ü–µ—Ä–≤—ã–µ 2 —Ä—è–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º 2 –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º 1
    builder.adjust(2, 2, 2, 1)
    
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=False
    )

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def admin_back_handler(message: Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())
    
    builder = ReplyKeyboardBuilder()
    for text, _ in commands:
        builder.button(text=text)
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu())
    except OperationalError as e:
        logger.error(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT 
                    c.title,
                    COUNT(DISTINCT m.module_id) as modules,
                    COUNT(DISTINCT t.task_id) as tasks,
                    COUNT(s.submission_id) as submissions
                FROM courses c
                LEFT JOIN modules m ON c.course_id = m.course_id
                LEFT JOIN tasks t ON m.module_id = t.module_id
                LEFT JOIN submissions s ON t.task_id = s.task_id
                GROUP BY c.course_id
            ''')
            stats = cursor.fetchall()
        
        response = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:\n\n"
        for stat in stats:
            response += (
                f"üìö {stat[0]}\n"
                f"–ú–æ–¥—É–ª–µ–π: {stat[1]}\n"
                f"–ó–∞–¥–∞–Ω–∏–π: {stat[2]}\n"
                f"–†–µ—à–µ–Ω–∏–π: {stat[3]}\n\n"
            )
        
        await message.answer(response)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT 
                    u.user_id,
                    u.full_name,
                    c.title,
                    COUNT(s.submission_id) as submissions
                FROM users u
                LEFT JOIN courses c ON u.current_course = c.course_id
                LEFT JOIN submissions s ON u.user_id = s.user_id
                GROUP BY u.user_id, c.title
            ''')
            users = cursor.fetchall()
        
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += (
                f"üë§ {user[1]} (ID: {user[0]})\n"
                f"–ö—É—Ä—Å: {user[2] or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
                f"–†–µ—à–µ–Ω–∏–π: {user[3]}\n\n"
            )
        
        await message.answer(response)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

### BLOCK 5: COURSE MANAGEMENT ###

def courses_kb_admin():
    with db.cursor() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(text=course[1], callback_data=f"admin_course_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
async def delete_course_start(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=courses_kb_admin())

@dp.callback_query(F.data.startswith("admin_course_"))
async def confirm_course_delete(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    
    with db.cursor() as cursor:
        cursor.execute("SELECT title FROM courses WHERE course_id = %s", (course_id,))
        title = cursor.fetchone()[0]
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{course_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        f"üö® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å?\n{title}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def execute_course_delete(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    
    try:
        with db.cursor() as cursor:
            cursor.execute("DELETE FROM courses WHERE course_id = %s", (course_id,))
            await callback.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞")
    
    await callback.message.edit_text("–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω", reply_markup=None)

### BLOCK 6: CONTENT CREATION ###

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course_start(message: Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminForm.add_course_title)

@dp.message(AdminForm.add_course_title)
async def process_course_title(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(AdminForm.add_course_description)

@dp.message(AdminForm.add_course_description)
async def process_course_desc(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–ª–æ–∂–∫—É –∫—É—Ä—Å–∞ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_course_media)

@dp.message(AdminForm.add_course_media, F.content_type.in_({'photo', 'document'}))
async def process_course_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    media_id = await handle_media(message, state)
    data = await state.get_data()
    
    try:
        with db.cursor() as cursor:
            cursor.execute(
                "INSERT INTO courses (title, description, media_id) VALUES (%s, %s, %s)",
                (data['title'], data['description'], media_id)
            )
        await message.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_menu())
    except IntegrityError:
        await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    await state.clear()

@dp.message(AdminForm.add_course_media, Command('skip'))
async def process_course_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    if message.text == "/skip":
        data = await state.get_data()
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO courses (title, description) VALUES (%s, %s)",
                    (data['title'], data['description'])
                )
            await message.answer("‚úÖ –ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –º–µ–¥–∏–∞!", reply_markup=admin_menu())
        except IntegrityError:
            await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=admin_menu())
        await state.clear()
        return

    media = await handle_media(message)
    if media:
        data = await state.get_data()
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO courses (title, description, media_id) VALUES (%s, %s, %s)",
                    (data['title'], data['description'], media['file_id'])
                )
            await message.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_menu())
        except IntegrityError:
            await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=admin_menu())
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∫—É—Ä—Å–∞")

### BLOCK 7: MODULE AND TASK CREATION ###

def courses_for_modules():
    with db.cursor() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        return cursor.fetchall()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å")
async def add_module_start(message: Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    builder = InlineKeyboardBuilder()
    for course in courses_for_modules():
        builder.button(text=course[1], callback_data=f"add_module_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –º–æ–¥—É–ª—è:", reply_markup=builder.as_markup())

@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_menu() if str(message.from_user.id) == ADMIN_ID else main_menu()
    )
    
@dp.callback_query(F.data.startswith("add_module_"))
async def select_course_for_module(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    await state.update_data(course_id=course_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:")
    await state.set_state(AdminForm.add_module_title)

@dp.message(AdminForm.add_module_title)
async def process_module_title(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(title=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –º–æ–¥—É–ª—è –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_module_media)


@dp.message(AdminForm.add_module_media)
async def process_module_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    data = await state.get_data()
    if message.text == "/skip":
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO modules (course_id, title) VALUES (%s, %s)",
                    (data['course_id'], data['title'])
                )
            await message.answer("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è")
        await state.clear()
        return

    media = await handle_media(message)
    if media:
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO modules (course_id, title, media_id) VALUES (%s, %s, %s)",
                    (data['course_id'], data['title'], media['file_id'])
                )
            await message.answer("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω —Å –º–µ–¥–∏–∞!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è")
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è")

@dp.message(AdminForm.add_module_media, Command('skip'))
async def skip_module_media(message: Message, state: FSMContext):
    data = await state.get_data()
    
    with db.cursor() as cursor:
        cursor.execute(
            "INSERT INTO modules (course_id, title) VALUES (%s, %s)",
            (data['course_id'], data['title'])
        )
    
    await message.answer("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –º–µ–¥–∏–∞!", reply_markup=admin_menu())
    await state.clear()

### BLOCK 8: TASK CREATION ###

@dp.message(F.text == "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def add_task_start(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    builder = InlineKeyboardBuilder()
    for course in courses_for_modules():
        builder.button(text=course[1], callback_data=f"select_course_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("select_course_"))
async def select_course_task(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    
    with db.cursor() as cursor:
        cursor.execute(
            "SELECT module_id, title FROM modules WHERE course_id = %s",
            (course_id,)
        )
        modules = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for module in modules:
        builder.button(text=module[1], callback_data=f"select_module_{module[0]}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel")
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("select_module_"))
async def select_module_task(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[2])
    await state.update_data(module_id=module_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_task_title)

@dp.message(AdminForm.add_task_title)
async def process_task_title(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_task_content)

@dp.message(AdminForm.add_task_content)
async def process_task_content(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(content=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_task_media)


@dp.message(AdminForm.add_task_media, F.content_type.in_({'document', 'photo'}))
async def process_task_media(message: Message, state: FSMContext):
    media = await handle_media(message)
    data = await state.get_data()
    
    with db.cursor() as cursor:
        cursor.execute(
            "INSERT INTO tasks (module_id, title, content, file_type, file_id) VALUES (%s, %s, %s, %s, %s)",
            (data['module_id'], data['title'], data['content'], media['type'], media['file_id'])
        )
    
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=admin_menu())
    await state.clear()

@dp.message(AdminForm.add_task_media, Command('skip'))
async def process_task_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    data = await state.get_data()
    if message.text == "/skip":
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO tasks (module_id, title, content) VALUES (%s, %s, %s)",
                    (data['module_id'], data['title'], data['content'])
                )
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()
        return

    media = await handle_media(message)
    if media:
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO tasks (module_id, title, content, file_id, file_type) VALUES (%s, %s, %s, %s, %s)",
                    (data['module_id'], data['title'], data['content'], media['file_id'], media['type'])
                )
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ñ–∞–π–ª–æ–º!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip")
### BLOCK 9: UTILITY HANDLERS ###

@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    if str(callback.from_user.id) == ADMIN_ID:
        await callback.message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())
    else:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await message.delete()

async def on_startup():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

async def on_shutdown():
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    db.close()
    await bot.session.close()

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
