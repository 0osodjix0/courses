import os
import logging
import random
import psycopg2
from aiogram.exceptions import TelegramAPIError
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, SimpleDocTemplate
from aiogram.types import BufferedInputFile
from collections import namedtuple
from dotenv import load_dotenv
from typing import Optional
from psycopg2 import OperationalError, IntegrityError
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from urllib.parse import urlparse
from contextlib import contextmanager
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram import BaseMiddleware
from datetime import datetime
from aiogram.enums import ParseMode 
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaPhoto,
    InputMediaDocument,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup
)
from aiogram.utils.media_group import MediaGroupBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ü–∞—Ä—Å–∏–Ω–≥ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
parsed_db = urlparse(DATABASE_URL)

class CleanupMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if event.text in ["‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"]:
            state = data.get("fsm_context")
            if state:
                await state.clear()
        return await handler(event, data)

class Database:
    def __init__(self):
        self.conn = None
        self._connect()
        self._init_tables()
        self._check_connection()

    def _check_connection(self):
        with self.cursor() as cursor:
            cursor.execute("SELECT 1")
            if cursor.fetchone()[0] != 1:
                raise ConnectionError("Database connection failed")
            
    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
        try:
            self.conn = psycopg2.connect(
                dbname=parsed_db.path[1:],
                user=parsed_db.username,
                password=parsed_db.password,
                host=parsed_db.hostname,
                port=parsed_db.port,
                sslmode='require'
            )
            self.conn.autocommit = False
        except OperationalError as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

import logging
from contextlib import contextmanager
from psycopg2 import OperationalError
from urllib.parse import urlparse
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        self.conn = None
        self._connect()
        self._init_tables()
        self._check_connection()

    def _check_connection(self):
        with self.cursor() as cursor:
            cursor.execute("SELECT 1")
            if cursor.fetchone()[0] != 1:
                raise ConnectionError("Database connection failed")
            
    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
        try:
            self.conn = psycopg2.connect(
                dbname=parsed_db.path[1:],
                user=parsed_db.username,
                password=parsed_db.password,
                host=parsed_db.hostname,
                port=parsed_db.port,
                sslmode='require'
            )
            self.conn.autocommit = False
        except OperationalError as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def _init_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        try:
            with self.conn.cursor() as cursor:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,
                        full_name TEXT NOT NULL,
                        current_course INTEGER,
                        registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS courses (
                        course_id SERIAL PRIMARY KEY,
                        title TEXT UNIQUE NOT NULL,
                        description TEXT,
                        media_id TEXT
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS modules (
                        module_id SERIAL PRIMARY KEY,
                        course_id INTEGER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE,
                        title TEXT NOT NULL,
                        media_id TEXT
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS tasks (
                        task_id SERIAL PRIMARY KEY,
                        module_id INTEGER NOT NULL REFERENCES modules(module_id) ON DELETE CASCADE,
                        title TEXT NOT NULL,
                        content TEXT NOT NULL,
                        file_id TEXT,
                        file_type VARCHAR(10)
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS final_tasks (
                        final_task_id SERIAL PRIMARY KEY,
                        course_id INTEGER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE,
                        title TEXT NOT NULL,
                        content TEXT NOT NULL,
                        file_id TEXT,
                        file_type VARCHAR(10)
                    )''')

                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS submissions (
                        submission_id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
                        task_id INTEGER NOT NULL REFERENCES tasks(task_id) ON DELETE CASCADE,
                        status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'accepted', 'rejected')),
                        score INTEGER CHECK(score BETWEEN 0 AND 100),
                        submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        file_id TEXT,
                        content TEXT,
                        file_type VARCHAR(10)
                    )''')

                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_submissions_status 
                    ON submissions(status)''')
                
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_submissions_user_task 
                    ON submissions(user_id, task_id)''')

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                self._safe_add_column(cursor, 'tasks', 'file_type', 'VARCHAR(10)')
                self._safe_add_column(cursor, 'submissions', 'file_type', 'VARCHAR(10)')

                self.conn.commit()
                
        except Exception as e:
            self.conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            raise

    def _safe_add_column(self, cursor, table, column, col_type):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            cursor.execute(
                f"ALTER TABLE {table} "
                f"ADD COLUMN IF NOT EXISTS {column} {col_type}"
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column}: {e}")
            self.conn.rollback()
            
    def is_course_completed(self, user_id: int, course_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –∫—É—Ä—Å–∞"""
        with self.cursor() as cursor:
            cursor.execute('''
                SELECT COUNT(t.task_id) = COUNT(s.task_id)
                FROM tasks t
                LEFT JOIN modules m ON t.module_id = m.module_id
                LEFT JOIN submissions s 
                    ON t.task_id = s.task_id 
                    AND s.user_id = %s 
                    AND s.status = 'accepted'
                WHERE m.course_id = %s
            ''', (user_id, course_id))
            result = cursor.fetchone()
            return result[0] if result else False

    @contextmanager
    def cursor(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ—Ä–æ–º"""
        cursor = None
        try:
            cursor = self.conn.cursor()
            yield cursor
            self.conn.commit()
        except Exception as e:
            self.conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise
        finally:
            if cursor:
                cursor.close()

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.conn and not self.conn.closed:
            self.conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
                
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)  # –ü–µ—Ä–µ–¥–∞–µ–º bot —è–≤–Ω–æ
db = Database()

dp.message.middleware(CleanupMiddleware())

class Form(StatesGroup):
    full_name = State()
    course_selection = State()

class AdminForm(StatesGroup):
    add_course_title = State()
    add_course_description = State()
    add_course_media = State()
    add_module_title = State()
    add_module_media = State()
    add_task_title = State()
    add_task_content = State()
    add_task_media = State()
    delete_course = State()
    add_final_task_title = State()
    add_final_task_content = State()
    add_final_task_media = State()
    review_final_task = State()
    edit_content_type = State()
    edit_course = State()
    edit_module = State()
    edit_task = State()
    edit_final_task = State()
    delete_confirmation = State()
    edit_title = State()
    edit_description = State()
    edit_media = State()
    edit_select_item = State()
    
class TaskStates(StatesGroup):
    waiting_for_solution = State()
    waiting_for_retry = State()
    waiting_for_final_solution = State()
    waiting_final_solution = State()
    
def main_menu() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    # –î–ª—è Reply-–∫–Ω–æ–ø–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    builder.adjust(2)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    return builder.as_markup(
        resize_keyboard=True,    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
        one_time_keyboard=False  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π
    )
    
def task_keyboard(task_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"submit_{task_id}")
    builder.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"retry_{task_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é", callback_data=f"module_from_task_{task_id}")
    builder.adjust(1)
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π", 
        callback_data=f"list_tasks_{task_data[0]}"  # –ø–µ—Ä–µ–¥–∞–µ–º module_id
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(F.text.startswith("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"))
async def handle_submit_solution(message: Message, state: FSMContext):
    try:
        task_id = int(message.text.split()[-1])
        await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(TaskStates.waiting_for_solution)
        await state.update_data(task_id=task_id)
    except Exception as e:
        logger.error(f"Submit error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è")

@dp.errors()
async def global_error_handler(update: types.Update, exception: Exception):
    logger.error(f"Critical error: {exception}", exc_info=True)
    
    try:
        error_msg = f"üö® Error: {str(exception)[:2000]}"
        await bot.send_message(ADMIN_ID, error_msg)
        
        if update.message:
            await update.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        elif update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error handler error: {e}")
    
    return True

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞
@dp.callback_query(F.data.startswith("check_final_"))
async def check_final_task(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    if db.is_course_completed(user_id, course_id):
        await callback.message.answer(
            "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                            callback_data=f"final_task_{course_id}"
                        )
                    ]
                ]
            )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è reply_markup
        )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è answer()
    else:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞!", show_alert=True)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫—É—Ä—Å–∞
def course_details_keyboard(course_id: int, user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥—É–ª–µ–π
    ...
    
    # –ö–Ω–æ–ø–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    builder.button(
        text="üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" if db.is_course_completed(user_id, course_id) else "üîí –ò—Ç–æ–≥–æ–≤–æ–µ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
        callback_data=f"check_final_{course_id}"
    )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="all_courses")
    builder.adjust(1)
    return builder.as_markup()

@dp.callback_query(F.data.startswith("accept_"))
async def accept_submission(callback: CallbackQuery):
    # ... –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    if db.is_course_completed(user_id, course_id):
        await bot.send_message(
            user_id,
            "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üéì –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é",
                            callback_data=f"final_task_{course_id}"
                        )
                    ]
                ]
            )
        )  # –ó–∞–∫—Ä—ã—Ç—ã 2 —Å–∫–æ–±–∫–∏: –¥–ª—è reply_markup –∏ send_message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("final_task_"))
async def show_final_task(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    if not db.is_course_completed(user_id, course_id):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    with db.cursor() as cursor:
        cursor.execute('''
            SELECT title, content, file_id, file_type 
            FROM final_tasks 
            WHERE course_id = %s
        ''', (course_id,))
        final_task = cursor.fetchone()

    if not final_task:
        await callback.answer("‚ùå –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
        
    title, content, file_id, file_type = final_task
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è
    ...

    await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(TaskStates.waiting_final_solution)
    await state.update_data(course_id=course_id)

@dp.message(F.text.startswith("üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
async def handle_retry_solution(message: Message, state: FSMContext):
    try:
        task_id = int(message.text.split()[-1])
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(TaskStates.waiting_for_solution)
        await state.update_data(task_id=task_id)
    except Exception as e:
        logger.error(f"Retry error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

@dp.message(F.text.startswith("üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é"))
async def handle_back_to_module(message: Message):
    try:
        task_id = int(message.text.split()[-1])
        # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–¥—É–ª—é
        await show_module_by_task(message, task_id)
    except Exception as e:
        logger.error(f"Back error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", reply_markup=ReplyKeyboardRemove())

async def show_module_by_task(message: Message, task_id: int):
    with db.cursor() as cursor:
        cursor.execute('''
            SELECT m.module_id, m.title 
            FROM tasks t
            JOIN modules m ON t.module_id = m.module_id
            WHERE t.task_id = %s
        ''', (task_id,))
        module_data = cursor.fetchone()
    
    if module_data:
        await message.answer(
            f"üì¶ –ú–æ–¥—É–ª—å: {module_data[1]}",
            reply_markup=module_tasks_keyboard(module_data[0])
        )
    else:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

def module_tasks_keyboard(module_id: int) -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–∞–¥–∞–Ω–∏–π –º–æ–¥—É–ª—è
    return builder.as_markup()

def modules_kb(course_id: int) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥—É–ª—è–º–∏ –∫—É—Ä—Å–∞"""
    builder = InlineKeyboardBuilder()
    
    try:
        with db.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            cursor.execute("SELECT 1 FROM courses WHERE course_id = %s", (course_id,))
            if not cursor.fetchone():
                builder.button(text="‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", callback_data="course_error")
                return builder.as_markup()

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞
            cursor.execute(
                "SELECT module_id, title FROM modules WHERE course_id = %s ORDER BY module_id",
                (course_id,)
            )
            modules = cursor.fetchall()

            if modules:
                for module_id, title in modules:
                    builder.button(
                        text=f"üì¶ {title}",
                        callback_data=f"module_{module_id}"
                    )
                builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", callback_data="all_courses")
            else:
                builder.button(text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π", callback_data="no_modules")
            
            builder.adjust(1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π: {e}")
        builder.button(text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="error")
    
    return builder.as_markup()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é"
@dp.callback_query(F.data.startswith("module_from_task_"))
async def back_to_module_handler(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split("_")[-1])
        
        with db.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º module_id –ø–æ task_id
            cursor.execute('''
                SELECT module_id 
                FROM tasks 
                WHERE task_id = %s
            ''', (task_id,))
            result = cursor.fetchone()
            
            if not result:
                await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            module_id = result[0]
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥—É–ª—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID
        await handle_module_selection(callback, module_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–¥—É–ª—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥—É–ª—è
async def handle_module_selection(callback: types.CallbackQuery, module_id: int):
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT m.title, m.course_id, c.title 
                FROM modules m
                JOIN courses c ON m.course_id = c.course_id
                WHERE m.module_id = %s
            ''', (module_id,))
            module_data = cursor.fetchone()
            
            if not module_data:
                await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            module_title, course_id, course_title = module_data

            cursor.execute(
                "SELECT task_id, title FROM tasks WHERE module_id = %s",
                (module_id,)
            )
            tasks = cursor.fetchall()

        builder = InlineKeyboardBuilder()
        
        if tasks:
            for task_id, title in tasks:
                builder.button(
                    text=f"üìù {title}",
                    callback_data=f"task_{task_id}"
                )
            
            builder.button(
                text="üîô –ö –º–æ–¥—É–ª—è–º –∫—É—Ä—Å–∞", 
                callback_data=f"course_{course_id}"
            )
            builder.adjust(1)
            
            await callback.message.edit_text(
                f"üìö –ö—É—Ä—Å: {course_title}\nüì¶ –ú–æ–¥—É–ª—å: {module_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")
    
def cancel_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    return builder.as_markup()

def support_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"tg://user?id={ADMIN_ID}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data
    builder.adjust(1)
    return builder.as_markup()

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("submit_"))
async def handle_submit_solution(callback: types.CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT m.module_id, m.title, 
                (SELECT status FROM submissions 
                 WHERE user_id = %s AND task_id = %s 
                 ORDER BY submitted_at DESC LIMIT 1)
                FROM tasks t
                JOIN modules m ON t.module_id = m.module_id
                WHERE t.task_id = %s
            ''', (user_id, task_id, task_id))
            data = cursor.fetchone()
            
        if not data:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        module_id, module_title, last_status = data

        # –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
        if last_status and last_status != 'rejected':
            await callback.answer("‚è≥ –†–µ—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            task_id=task_id,
            module_id=module_id,
            module_title=module_title,
            is_retry=last_status == 'rejected'
        )
        await callback.message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:",
        reply_markup=cancel_keyboard()  
        )
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = ReplyKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        await callback.message.edit_reply_markup()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ
        await callback.message.answer(
            f"üì§ {'–ò—Å–ø—Ä–∞–≤—å—Ç–µ' if last_status == 'rejected' else '–û—Ç–ø—Ä–∞–≤—å—Ç–µ'} "
            f"—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∏–∑ –º–æ–¥—É–ª—è '{module_title}':\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç",
            reply_markup=builder.as_markup(
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(TaskStates.waiting_for_solution)
        await callback.answer()

    except Exception as e:
        logger.error(f"Submit error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è")

@dp.message(
    TaskStates.waiting_for_solution,
    F.content_type.in_({'text', 'document', 'photo'}),
    ~F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"])  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
)
async def process_solution(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    task_id = data.get('task_id')
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        file_type = None
        file_id = None
        
        if message.document:
            file_type = 'document'
            file_id = message.document.file_id
        elif message.photo:
            file_type = 'photo'
            file_id = message.photo[-1].file_id

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        with db.cursor() as cursor:
            cursor.execute('''
                INSERT INTO submissions 
                (user_id, task_id, content, file_id, file_type)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING submission_id
            ''', (
                message.from_user.id,
                task_id,
                message.text or None,
                file_id,
                file_type
            ))
            submission_id = cursor.fetchone()[0]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await notify_admin(submission_id)
        
        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ –†–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –º–æ–¥—É–ª—è
        await show_module_tasks(message, data['module_id'], message.from_user.id)

    except Exception as e:
        logger.error(f"Solution processing error: {str(e)}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—à–µ–Ω–∏—è",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        await state.clear()

async def show_module_tasks(message: types.Message, module_id: int, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—à–µ–Ω–∏–π"""
    try:
        with db.cursor() as cursor:
            # SQL-–∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å task_id, task_title –∏ —Å—Ç–∞—Ç—É—Å)
            cursor.execute('''
                SELECT 
                    m.title AS module_title,
                    c.title AS course_title,
                    m.course_id,
                    t.task_id,
                    t.title AS task_title,
                    COALESCE(s.status, 'not_started') AS status
                FROM modules m
                JOIN courses c ON m.course_id = c.course_id
                JOIN tasks t ON m.module_id = t.module_id
                LEFT JOIN LATERAL (
                    SELECT status 
                    FROM submissions 
                    WHERE user_id = %s 
                    AND task_id = t.task_id 
                    ORDER BY submitted_at DESC 
                    LIMIT 1
                ) s ON true
                WHERE m.module_id = %s
                ORDER BY t.task_id
            ''', (user_id, module_id))
            
            results = cursor.fetchall()
            
            if not results:
                await message.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∏ –∫—É—Ä—Å–µ
            module_title = results[0][0]
            course_title = results[0][1]
            course_id = results[0][2]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()

            # –í–∞—à –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
            for row in results:
                *_, task_id, task_title, last_status = row
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                status = last_status if last_status else 'not_started'
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏
                status_info = {
                    'accepted': {'icon': '‚úÖ', 'text': f"{task_title} (–ü—Ä–∏–Ω—è—Ç–æ)"},
                    'rejected': {'icon': '‚ùå', 'text': f"{task_title} (–¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ–∫)"},
                    'pending': {'icon': '‚è≥', 'text': f"{task_title} (–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)"},
                    'not_started': {'icon': 'üìù', 'text': task_title}
                }.get(status, {'icon': 'üìù', 'text': task_title})
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–¥–∞–Ω–∏—è
                builder.button(
                    text=f"{status_info['icon']} {status_info['text']}",
                    callback_data=f"task_{task_id}" if status != 'accepted' else f"completed_{task_id}"
                )
            # –í–∞—à –±–ª–æ–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å

            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_builder = InlineKeyboardBuilder()
            nav_builder.button(text="üîô –ö –∫—É—Ä—Å—É", callback_data=f"course_{course_id}")
            nav_builder.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            nav_builder.adjust(2)

            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            builder.attach(nav_builder)
            builder.adjust(1, 2, 2)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f"üìö –ö—É—Ä—Å: {course_title}\n"
                f"üì¶ –ú–æ–¥—É–ª—å: {module_title}\n\n"
                "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π:\n"
                "‚úÖ - –ø—Ä–∏–Ω—è—Ç–æ\n‚ùå - –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n‚è≥ - –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\nüìù - –Ω–µ –Ω–∞—á–∞—Ç–æ",
                reply_markup=builder.as_markup()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
        
@dp.callback_query(F.data.startswith("info_"))
async def show_task_info(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    await callback.answer(
        "–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!\n"
        "–°—Ç–∞—Ç—É—Å: " + ("–ü—Ä–∏–Ω—è—Ç–æ" if 'accepted' in callback.data else "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"),
        show_alert=True
    )
    
@dp.callback_query(F.data.startswith("completed_"))
async def handle_completed_task(callback: types.CallbackQuery):
    task_id = callback.data.split("_")[1]
    await callback.answer(
        "‚úÖ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–¥–∞–Ω–∏—è–º.",
        show_alert=True
    )
    await callback.message.delete()

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await callback.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("completed_task_"))
async def handle_completed_task(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[2])
    await callback.answer(
        "‚úÖ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–¥–∞–Ω–∏—è–º.",
        show_alert=True
    )

@dp.callback_query(F.data.startswith("retry_"))
async def handle_retry_solution(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split("_")[1])
        await callback.answer()
        await handle_submit_solution(callback, task_id=task_id)
    except Exception as e:
        logger.error(f"Retry error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    text = (
        "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
        "1. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "2. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏"
    )
    await message.answer(text, reply_markup=support_keyboard())

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    with db.cursor() as cursor:
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (message.from_user.id,))
        user = cursor.fetchone()
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[1]}!", 
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            reply_markup=main_menu()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "üìù –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û. "
            "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –º–æ–≥ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.full_name)

@dp.message(Form.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)")
        return
    
    try:
        with db.cursor() as cursor:
            cursor.execute(
                "INSERT INTO users (user_id, full_name) VALUES (%s, %s)",
                (message.from_user.id, message.text)
            )
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())
        await state.clear()
    except IntegrityError:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await state.clear()

async def handle_media(message: Message):
    if message.photo:
        return {'type': 'photo', 'file_id': message.photo[-1].file_id}
    elif message.document:
        return {'type': 'document', 'file_id': message.document.file_id}
    return None

def courses_kb() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    
    with db.cursor() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()

    for course in courses:
        builder.button(
            text=f"üìò {course[1]}", 
            callback_data=f"course_{course[0]}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    builder.adjust(1)
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=True
    )

@dp.message(F.text == "üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
async def show_courses(message: types.Message):
    with db.cursor() as cursor:
        cursor.execute(
            """SELECT c.title 
            FROM users u
            LEFT JOIN courses c ON u.current_course = c.course_id 
            WHERE u.user_id = %s""", 
            (message.from_user.id,)
        )
        current_course = cursor.fetchone()
    
    text = "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –º–æ–¥—É–ª–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏. –í—ã–ø–æ–ª–Ω—è–π –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! üöÄ \n\n"
    if current_course and current_course[0]:
        text += f"üéØ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_course[0]}\n\n"
    text += "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    
    await message.answer(text, reply_markup=courses_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞@dp.callback_query(F.data.startswith("course_"))
async def select_course(callback: types.CallbackQuery):
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        kb = modules_kb(course_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        with db.cursor() as cursor:
            cursor.execute("SELECT 1 FROM final_tasks WHERE course_id = %s", (course_id,))
            if cursor.fetchone():
                builder = InlineKeyboardBuilder()
                builder.button(
                    text="üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", 
                    callback_data=f"final_task_{course_id}"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
                kb.inline_keyboard.extend(builder.export())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if media_id:
            await callback.message.delete()
            await callback.message.answer_photo(
                media_id,
                caption=response_text,
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                text=response_text,
                reply_markup=kb
            )

        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
        _, *rest = callback.data.split('_', maxsplit=1)
        if not rest:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        course_part = rest[0]
        logger.debug(f"Attempting to process course: {course_part}")

        # –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if not course_part.isdecimal():
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: {course_part}")
            
        course_id = int(course_part)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
        with db.cursor() as cursor:
            cursor.execute("""
                SELECT EXISTS(
                    SELECT 1 
                    FROM courses 
                    WHERE course_id = %s
                )""", (course_id,))
            exists = cursor.fetchone()[0]
            
            if not exists:
                raise ValueError(f"–ö—É—Ä—Å {course_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            cursor.execute("""
                WITH user_update AS (
                    UPDATE users 
                    SET current_course = %s 
                    WHERE user_id = %s
                    RETURNING *
                )
                SELECT 
                    c.title,
                    c.media_id
                FROM courses c
                WHERE c.course_id = %s""", 
                (course_id, callback.from_user.id, course_id))
                
            course_data = cursor.fetchone()
            
            if not course_data:
                raise RuntimeError("–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        title, media_id = course_data
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        kb = modules_kb(course_id)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤
        response_text = f"üìö –ö—É—Ä—Å: {title}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:"

        if media_id:
            await callback.message.delete()
            await callback.message.answer_photo(
                media_id,
                caption=response_text,
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                text=response_text,
                reply_markup=kb
            )

    except ValueError as e:
        logger.warning(f"Validation error: {str(e)}")
        await callback.answer(
            "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å",
            show_alert=True,
            cache_time=60
        )
    except Exception as e:
        logger.critical(
            f"Critical error in course selection: {traceback.format_exc()}"
        )
        await callback.answer(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
        await bot.send_message(
            ADMIN_ID,
            f"üö® Course selection error:\n{str(e)[:300]}"
        )
        reply_kb = ReplyKeyboardBuilder()
        reply_kb.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_kb.as_markup(
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞
async def modules_keyboard(course_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    try:
        with db.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –∫—É—Ä—Å–∞
            cursor.execute(
                "SELECT module_id, title FROM modules WHERE course_id = %s ORDER BY module_id",
                (course_id,)
            )
            modules = cursor.fetchall()

            if modules:
                for module_id, title in modules:
                    builder.button(
                        text=f"üì¶ {title}",
                        callback_data=f"module_{module_id}"
                    )
            else:
                builder.button(
                    text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π",
                    callback_data="no_modules_placeholder"
                )

    except OperationalError as e:
        logger.error(f"Database error: {str(e)}")
        builder.button(
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π",
            callback_data="module_load_error"
        )
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        builder.button(
            text="‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
            callback_data="system_error"
        )
    finally:
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        builder.button(
            text="üîô –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤",
            callback_data="all_courses"
        )

    builder.adjust(1)
    return builder.as_markup()

# –ë–ª–æ–∫ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("task_"))
async def handle_task_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split('_')[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ë–î
        with db.cursor() as cursor:
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞
            cursor.execute('''
                SELECT 
                    t.module_id,
                    t.title,
                    t.content,
                    t.file_id,
                    t.file_type,
                    m.course_id,
                    s.status
                FROM tasks t
                JOIN modules m ON t.module_id = m.module_id
                LEFT JOIN (
                    SELECT task_id, status 
                    FROM submissions 
                    WHERE user_id = %s 
                    ORDER BY submitted_at DESC 
                    LIMIT 1
                ) s ON t.task_id = s.task_id
                WHERE t.task_id = %s
            ''', (user_id, task_id))
            
            task_data = cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞–Ω–∏—è
        if not task_data:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        (module_id, title, content, 
         file_id, file_type, 
         course_id, status) = task_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        if status == 'accepted':
            await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            current_module=module_id,
            task_id=task_id
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        inline_builder = InlineKeyboardBuilder()
        if status != 'accepted':
            inline_builder.button(
                text="‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ" if status != 'rejected' else "üîÑ –ò—Å–ø—Ä–∞–≤–∏—Ç—å",
                callback_data=f"submit_{task_id}"
            )
        inline_builder.button(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º",
            callback_data=f"module_{module_id}"
        )
        inline_builder.adjust(1)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        try:
            if file_id and file_type:
                if file_type == 'photo':
                    await callback.message.answer_photo(
                        file_id,
                        caption=f"üìå {title}\n\n{content}",
                        reply_markup=inline_builder.as_markup()
                    )
                elif file_type == 'document':
                    await callback.message.answer_document(
                        file_id,
                        caption=f"üìå {title}\n\n{content}",
                        reply_markup=inline_builder.as_markup()
                    )
                else:
                    await callback.message.answer(
                        f"üìå {title}\n\n{content}\n\n‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞",
                        reply_markup=inline_builder.as_markup()
                    )
            else:
                await callback.message.answer(
                    f"üìå {title}\n\n{content}",
                    reply_markup=inline_builder.as_markup()
                )
                
        except Exception as media_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {media_error}")
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                reply_markup=inline_builder.as_markup()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è")
        
@dp.callback_query(F.data.startswith("task_completed_"))
async def handle_completed_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split('_')[2])
    await callback.answer(
        "‚úÖ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.",
        show_alert=True
    )

@dp.message(F.text == "üìã –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º")
async def back_to_tasks(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        module_id = data.get('current_module')
        
        if not module_id:
            raise ValueError("–¢–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–¥–∞–Ω–∏–π
        keyboard = await generate_tasks_keyboard(module_id)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        msg = await message.answer(
            "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –º–æ–¥—É–ª—è:",
            reply_markup=keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(last_message_id=msg.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è", reply_markup=ReplyKeyboardRemove())

async def generate_tasks_keyboard(module_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    try:
        with db.cursor() as cursor:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è
            cursor.execute('SELECT 1 FROM modules WHERE module_id = %s', (module_id,))
            if not cursor.fetchone():
                raise ValueError("–ú–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            cursor.execute('''
                SELECT task_id, title 
                FROM tasks 
                WHERE module_id = %s
                ORDER BY task_id
            ''', (module_id,))
            tasks = cursor.fetchall()

            for task_id, title in tasks:
                builder.button(
                    text=f"üìù {title}",
                    callback_data=f"task_{task_id}"
                )
            
            builder.button(
                text="üîô –ö –º–æ–¥—É–ª—è–º –∫—É—Ä—Å–∞", 
                callback_data=f"course_{module_id}"
            )
            builder.adjust(1)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
        builder.button(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="error")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π")
    
    return builder.as_markup()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def global_error_handler(update: types.Update, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.critical("Critical error: %s", exception, exc_info=True)
    
    try:
        if update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        elif update.message:
            await update.message.answer("üö® –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await bot.send_message(
            ADMIN_ID,
            f"üî• –û—à–∏–±–∫–∞:\n{exception}\n\nUpdate: {update.model_dump_json()}"
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: %s", e)
    
    return True

@dp.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )
    
# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥—É–ª–µ–π
async def handle_module_selection(message: types.Message, module_id: int):
    try:
        with db.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∏ –∫—É—Ä—Å–µ
            cursor.execute('''
                SELECT m.title, m.course_id, c.title 
                FROM modules m
                JOIN courses c ON m.course_id = c.course_id
                WHERE m.module_id = %s
            ''', (module_id,))
            module_data = cursor.fetchone()
            
            if not module_data:
                await message.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            module_title, course_id, course_title = module_data

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
            cursor.execute('''
                SELECT task_id, title 
                FROM tasks 
                WHERE module_id = %s
            ''', (module_id,))
            tasks = cursor.fetchall()

        builder = InlineKeyboardBuilder()
        
        if tasks:
            for task_id, title in tasks:
                builder.button(
                    text=f"üìù {title}",
                    callback_data=f"task_{task_id}"
                )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–¥—É–ª—è–º –∫—É—Ä—Å–∞
            builder.button(
                text="üîô –ö –º–æ–¥—É–ª—è–º –∫—É—Ä—Å–∞", 
                callback_data=f"course_{course_id}"
            )
            builder.adjust(1)
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∑–∞–º–µ–Ω–µ–Ω–æ message.message.edit_text –Ω–∞ message.answer
            await message.answer(
                f"üìö –ö—É—Ä—Å: {course_title}\n"
                f"üì¶ –ú–æ–¥—É–ª—å: {module_title}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=builder.as_markup()
            )
        else:
            await message.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–¥—É–ª—é
@dp.callback_query(F.data.startswith("module_from_task_"))
async def back_to_module_handler(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split("_")[-1])
        
        with db.cursor() as cursor:
            cursor.execute(
                "SELECT module_id FROM tasks WHERE task_id = %s",
                (task_id,))
            result = cursor.fetchone()
            
            if not result:
                await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            module_id = result[0]
        
        await handle_module_selection(callback, module_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–¥—É–ª—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–æ–¥—É–ª–µ–π
@dp.callback_query(F.data.startswith("module_"))
async def handle_module_selection(callback: types.CallbackQuery):
    try:
        module_id = int(callback.data.split('_')[1])
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT m.title, c.title, m.course_id 
                FROM modules m
                JOIN courses c ON m.course_id = c.course_id
                WHERE m.module_id = %s
            ''', (module_id,))
            module_data = cursor.fetchone()

        if not module_data:
            await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        module_title, course_title, course_id = module_data

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT task_id, title 
                FROM tasks 
                WHERE module_id = %s
            ''', (module_id,))
            tasks = cursor.fetchall()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        builder = InlineKeyboardBuilder()
        for task_id, title in tasks:
            builder.button(text=f"üìù {title}", callback_data=f"task_{task_id}")
        builder.button(text="üîô –ö –º–æ–¥—É–ª—è–º", callback_data=f"course_{course_id}")
        builder.adjust(1)

        await callback.message.answer(
            f"üì¶ –ú–æ–¥—É–ª—å: {module_title}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

@dp.callback_query(F.data.startswith("your_pattern"))
async def handler(callback: CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.delete()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(...)
        
    except Exception as e:
        logger.error(...)
        await callback.answer(...)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
@dp.callback_query(F.data == "all_courses")
async def show_all_courses(callback: types.CallbackQuery):
    try:
        with db.cursor() as cursor:
            cursor.execute("SELECT course_id, title FROM courses")
            courses = cursor.fetchall()

        builder = InlineKeyboardBuilder()
        for course_id, title in courses:
            builder.button(
                text=f"üìö {title}", 
                callback_data=f"course_{course_id}"
            )
        
        builder.adjust(1)
        await callback.message.edit_text(
            "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤")

### 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ###
@dp.callback_query(F.data.startswith("retry_"))
async def retry_submission(callback: CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        with db.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            cursor.execute('''
                SELECT submission_id FROM submissions
                WHERE user_id = %s AND task_id = %s AND status = 'rejected'
                ORDER BY submitted_at DESC LIMIT 1
            ''', (user_id, task_id))
            
            if not cursor.fetchone():
                await callback.answer("‚ùå –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π
            cursor.execute('''
                UPDATE submissions 
                SET status = 'pending',
                    score = NULL,
                    submitted_at = NOW()
                WHERE user_id = %s AND task_id = %s
            ''', (user_id, task_id))
            db.conn.commit()

        await callback.message.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
        await state.set_state(TaskStates.waiting_for_solution)
        await state.update_data(task_id=task_id)
        await callback.answer()

    except Exception as e:
        logger.error(f"Retry submission error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")

### 3. –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏–π ###
# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:
async def notify_admin(submission_id: int):
    try:
        with db.cursor() as cursor:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:
            cursor.execute('''
                SELECT s.file_id, s.file_type, s.content,
                       t.title, u.full_name, t.content as task_text
                FROM submissions s
                JOIN tasks t ON s.task_id = t.task_id
                JOIN users u ON s.user_id = u.user_id
                WHERE s.submission_id = %s
            ''', (submission_id,))
            
            data = cursor.fetchone()
            if not data:
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è
            text = (f"üì¨ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ #{submission_id}\n"
                    f"üìö –ó–∞–¥–∞–Ω–∏–µ: {data[3]}\n"
                    f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {data[4]}\n"
                    f"üìù –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{data[5]}\n\n"
                    f"‚úèÔ∏è –†–µ—à–µ–Ω–∏–µ:\n{data[2] or '–§–∞–π–ª –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏'}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            if data[0] and data[1]:
                ...

            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{submission_id}")
            kb.button(text="‚ùå –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ–∫", callback_data=f"reject_{submission_id}")
            kb.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É", url=f"tg://user?id={student_id}")
            kb.adjust(2, 1)

            if file_id and file_type:
                if file_type == 'photo':
                    await bot.send_photo(
                        ADMIN_ID,
                        file_id,
                        caption=text[:1024],
                        reply_markup=kb.as_markup()
                    )
                else:
                    await bot.send_document(
                        ADMIN_ID,
                        file_id,
                        caption=text[:1024],
                        reply_markup=kb.as_markup()
                    )
            else:
                await bot.send_message(
                    ADMIN_ID,
                    text,
                    reply_markup=kb.as_markup()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}")
        
@dp.message(TaskStates.waiting_for_solution, F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"]))
async def cancel_solution(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data.startswith("accept_") | F.data.startswith("reject_"))
async def handle_review(callback: CallbackQuery):
    try:
        action = callback.data.split("_")[0]
        submission_id = int(callback.data.split("_")[1])
        new_status = "accepted" if action == "accept" else "rejected"

        with db.cursor() as cursor:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            cursor.execute('''
                UPDATE submissions 
                SET status = %s 
                WHERE submission_id = %s
                RETURNING user_id, task_id
            ''', (new_status, submission_id))
            
            result = cursor.fetchone()
            if not result:
                await callback.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            user_id, task_id = result

            cursor.execute('SELECT title FROM tasks WHERE task_id = %s', (task_id,))
            task_title = cursor.fetchone()[0]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        await bot.send_message(
            user_id,
            f"üì¢ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é ¬´{task_title}¬ª {new_status}"
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.message.delete()
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}")

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

        await send_user_notification(
            user_id, 
            f"üì¢ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é ¬´{task_title}¬ª {new_status}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
def main_menu() -> types.ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    builder = ReplyKeyboardBuilder()
    buttons = [
        ("üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", None),
        ("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", None)
    ]
    
    for text, _ in buttons:
        builder.button(text=text)
    
    builder.adjust(2)
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=False
    )

def admin_menu() -> types.ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    builder = ReplyKeyboardBuilder()
    buttons = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üìù –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å",
        "üîÑ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
        "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å",
        "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        "üéì –î–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", 
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "üîô –ù–∞–∑–∞–¥"
    ]
    
    for text in buttons:
        builder.button(text=text)
    
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=False
    )

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.delete()
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())
    
    builder = ReplyKeyboardBuilder()
    for text, _ in commands:
        builder.button(text=text)
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu())
    except OperationalError as e:
        logger.error(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

@dp.message(F.text == "üîÑ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def show_pending_tasks(message: Message):
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT 
                    s.submission_id,
                    t.title AS task_title,
                    u.full_name,
                    s.submitted_at
                FROM submissions s
                JOIN tasks t ON s.task_id = t.task_id
                JOIN users u ON s.user_id = u.user_id
                WHERE s.status = 'pending'
                ORDER BY s.submitted_at DESC
            ''')
            pending_tasks = cursor.fetchall()

        if not pending_tasks:
            await message.answer("üéâ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ!")
            return

        builder = InlineKeyboardBuilder()
        for task in pending_tasks:
            submission_id, title, student, date = task
            builder.button(
                text=f"üìù {title} ({student})",
                callback_data=f"view_sub_{submission_id}"
            )
        
        builder.adjust(1)
        await message.answer(
            "üì• –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π")
        

@dp.callback_query(F.data.startswith("view_sub_"))
async def view_submission(callback: CallbackQuery):
    try:
        submission_id = int(callback.data.split("_")[2])
        
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT s.content, s.file_id, s.file_type,
                       t.title, u.full_name, t.content
                FROM submissions s
                JOIN tasks t ON s.task_id = t.task_id
                JOIN users u ON s.user_id = u.user_id
                WHERE s.submission_id = %s
            ''', (submission_id,))
            data = cursor.fetchone()

        if not data:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        content, file_id, file_type, title, student, task_text = data
        text = (f"üìö –ó–∞–¥–∞–Ω–∏–µ: {title}\n"
                f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student}\n"
                f"üìù –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{task_text}\n\n"
                f"‚úèÔ∏è –†–µ—à–µ–Ω–∏–µ:\n{content or '–ü—Ä–∏–ª–æ–∂–µ–Ω —Ñ–∞–π–ª'}")

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{submission_id}")
        kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{submission_id}")
        
        if file_id and file_type:
            if file_type == 'photo':
                await callback.message.answer_photo(
                    file_id,
                    caption=text,
                    reply_markup=kb.as_markup()
                )
            else:
                await callback.message.answer_document(
                    file_id,
                    caption=text,
                    reply_markup=kb.as_markup()
                )
        else:
            await callback.message.answer(
                text,
                reply_markup=kb.as_markup()
            )
            
        await callback.answer()
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        
@dp.callback_query(F.data.startswith("accept_"))
async def accept_submission(callback: CallbackQuery):
    submission_id = int(callback.data.split("_")[1])
    
    with db.cursor() as cursor:
        cursor.execute('''
            UPDATE submissions 
            SET status = 'accepted', 
                score = 100 
            WHERE submission_id = %s
            RETURNING user_id, task_id
        ''', (submission_id,))
        user_id, task_id = cursor.fetchone()
        
        cursor.execute('SELECT title FROM tasks WHERE task_id = %s', (task_id,))
        task_title = cursor.fetchone()[0]

    await bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é ¬´{task_title}¬ª –ø—Ä–∏–Ω—è—Ç–æ!"
    )
    await callback.message.edit_reply_markup()
    await callback.answer("–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_submission(callback: CallbackQuery):
    submission_id = int(callback.data.split("_")[1])
    
    with db.cursor() as cursor:
        cursor.execute('''
            UPDATE submissions 
            SET status = 'rejected'
            WHERE submission_id = %s
            RETURNING user_id, task_id
        ''', (submission_id,))
        user_id, task_id = cursor.fetchone()
        
        cursor.execute('SELECT title FROM tasks WHERE task_id = %s', (task_id,))
        task_title = cursor.fetchone()[0]

    await bot.send_message(
        user_id,
        f"‚ùå –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é ¬´{task_title}¬ª —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫."
    )
    await callback.message.edit_reply_markup()
    await callback.answer("–†–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT 
                    c.title,
                    COUNT(DISTINCT m.module_id) as modules,
                    COUNT(DISTINCT t.task_id) as tasks,
                    COUNT(s.submission_id) as submissions
                FROM courses c
                LEFT JOIN modules m ON c.course_id = m.course_id
                LEFT JOIN tasks t ON m.module_id = t.module_id
                LEFT JOIN submissions s ON t.task_id = s.task_id
                GROUP BY c.course_id
            ''')
            stats = cursor.fetchall()
        
        response = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:\n\n"
        for stat in stats:
            response += (
                f"üìö {stat[0]}\n"
                f"–ú–æ–¥—É–ª–µ–π: {stat[1]}\n"
                f"–ó–∞–¥–∞–Ω–∏–π: {stat[2]}\n"
                f"–†–µ—à–µ–Ω–∏–π: {stat[3]}\n\n"
            )
        
        await message.answer(response)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                SELECT 
                    u.user_id,
                    u.full_name,
                    c.title,
                    COUNT(s.submission_id) as submissions
                FROM users u
                LEFT JOIN courses c ON u.current_course = c.course_id
                LEFT JOIN submissions s ON u.user_id = s.user_id
                GROUP BY u.user_id, c.title
            ''')
            users = cursor.fetchall()
        
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += (
                f"üë§ {user[1]} (ID: {user[0]})\n"
                f"–ö—É—Ä—Å: {user[2] or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
                f"–†–µ—à–µ–Ω–∏–π: {user[3]}\n\n"
            )
        
        await message.answer(response)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

### BLOCK 5: COURSE MANAGEMENT ###

def courses_kb_admin():
    with db.cursor() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(text=course[1], callback_data=f"admin_course_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
async def delete_course_start(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=courses_kb_admin())

@dp.callback_query(F.data.startswith("admin_course_"))
async def confirm_course_delete(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    
    with db.cursor() as cursor:
        cursor.execute("SELECT title FROM courses WHERE course_id = %s", (course_id,))
        title = cursor.fetchone()[0]
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{course_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        f"üö® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å?\n{title}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def execute_course_delete(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    
    try:
        with db.cursor() as cursor:
            cursor.execute("DELETE FROM courses WHERE course_id = %s", (course_id,))
            await callback.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞")
    
    await callback.message.edit_text("–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω", reply_markup=None)

### BLOCK 6: CONTENT CREATION ###

@dp.callback_query(F.data.startswith("course_"))
async def select_course_handler(callback: types.CallbackQuery):
    try:
        course_id = int(callback.data.split('_')[1])
        
        with db.cursor() as cursor:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                UPDATE users 
                SET current_course = %s 
                WHERE user_id = %s
            """, (course_id, callback.from_user.id))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
            cursor.execute("""
                SELECT title, media_id 
                FROM courses 
                WHERE course_id = %s
            """, (course_id,))
            course_data = cursor.fetchone()

            if not course_data:
                await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            title, media_id = course_data
            keyboard = modules_kb(course_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
            
            if media_id:
                await callback.message.delete()
                await callback.message.answer_photo(
                    media_id,
                    caption=f"üìö –ö—É—Ä—Å: {title}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_text(
                    text=f"üìö –ö—É—Ä—Å: {title}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
                    reply_markup=keyboard
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞")

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course_start(message: Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminForm.add_course_title)

@dp.message(AdminForm.add_course_title)
async def process_course_title(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(AdminForm.add_course_description)

@dp.message(AdminForm.add_course_description)
async def process_course_desc(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–ª–æ–∂–∫—É –∫—É—Ä—Å–∞ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_course_media)

@dp.message(AdminForm.add_course_media, F.content_type.in_({'photo', 'document'}))
async def process_course_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    media_id = await handle_media(message, state)
    data = await state.get_data()
    
    try:
        with db.cursor() as cursor:
            cursor.execute(
                "INSERT INTO courses (title, description, media_id) VALUES (%s, %s, %s)",
                (data['title'], data['description'], media_id)
            )
        await message.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_menu())
    except IntegrityError:
        await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    await state.clear()

@dp.message(AdminForm.add_course_media, Command('skip'))
async def process_course_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    if message.text == "/skip":
        data = await state.get_data()
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO courses (title, description) VALUES (%s, %s)",
                    (data['title'], data['description'])
                )
            await message.answer("‚úÖ –ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –º–µ–¥–∏–∞!", reply_markup=admin_menu())
        except IntegrityError:
            await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=admin_menu())
        await state.clear()
        return

    media = await handle_media(message)
    if media:
        data = await state.get_data()
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO courses (title, description, media_id) VALUES (%s, %s, %s)",
                    (data['title'], data['description'], media['file_id'])
                )
            await message.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_menu())
        except IntegrityError:
            await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=admin_menu())
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∫—É—Ä—Å–∞")

### BLOCK 7: MODULE AND TASK CREATION ###

def courses_for_modules():
    with db.cursor() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        return cursor.fetchall()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å")
async def add_module_start(message: Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    builder = InlineKeyboardBuilder()
    for course in courses_for_modules():
        builder.button(text=course[1], callback_data=f"add_module_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –º–æ–¥—É–ª—è:", reply_markup=builder.as_markup())

@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_menu() if str(message.from_user.id) == ADMIN_ID else main_menu()
    )
    
@dp.callback_query(F.data.startswith("add_module_"))
async def select_course_for_module(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    await state.update_data(course_id=course_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:")
    await state.set_state(AdminForm.add_module_title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@dp.message(F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"]))
async def global_cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text.lower() == "üîô –Ω–∞–∑–∞–¥")
async def back_handler(message: Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove()
    )
    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
class NotButtonFilter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text not in ["‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"]
        
@dp.message(AdminForm.add_module_title)
async def process_module_title(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(title=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –º–æ–¥—É–ª—è –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_module_media)


@dp.message(AdminForm.add_module_media)
async def process_module_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    data = await state.get_data()
    if message.text == "/skip":
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO modules (course_id, title) VALUES (%s, %s)",
                    (data['course_id'], data['title'])
                )
            await message.answer("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è")
        await state.clear()
        return

    media = await handle_media(message)
    if media:
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO modules (course_id, title, media_id) VALUES (%s, %s, %s)",
                    (data['course_id'], data['title'], media['file_id'])
                )
            await message.answer("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω —Å –º–µ–¥–∏–∞!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è")
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è")

@dp.message(AdminForm.add_module_media, Command('skip'))
async def skip_module_media(message: Message, state: FSMContext):
    data = await state.get_data()
    
    with db.cursor() as cursor:
        cursor.execute(
            "INSERT INTO modules (course_id, title) VALUES (%s, %s)",
            (data['course_id'], data['title'])
        )
    
    await message.answer("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –º–µ–¥–∏–∞!", reply_markup=admin_menu())
    await state.clear()

### BLOCK 8: TASK CREATION ###

@dp.message(F.text == "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def add_task_start(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    builder = InlineKeyboardBuilder()
    for course in courses_for_modules():
        builder.button(text=course[1], callback_data=f"select_course_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("select_course_"))
async def select_course_task(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    
    with db.cursor() as cursor:
        cursor.execute(
            "SELECT module_id, title FROM modules WHERE course_id = %s",
            (course_id,)
        )
        modules = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for module in modules:
        builder.button(text=module[1], callback_data=f"select_module_{module[0]}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel")
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("select_module_"))
async def select_module_task(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[2])
    await state.update_data(module_id=module_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_task_title)

@dp.message(AdminForm.add_task_title)
async def process_task_title(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_task_content)

@dp.message(AdminForm.add_task_content)
async def process_task_content(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    await state.update_data(content=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_task_media)

@dp.message(F.text == "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
async def content_management(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –ö—É—Ä—Å—ã", callback_data="edit_content_courses")
    builder.button(text="üì¶ –ú–æ–¥—É–ª–∏", callback_data="edit_content_modules")
    builder.button(text="üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="edit_content_tasks")
    builder.button(text="üéì –ò—Ç–æ–≥–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="edit_content_final")
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=builder.as_markup())

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.callback_query(F.data.startswith("edit_content_"))
async def select_content_type(callback: CallbackQuery, state: FSMContext):
    content_type = callback.data.split("_")[2]
    await state.update_data(content_type=content_type)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    with db.cursor() as cursor:
        if content_type == "courses":
            cursor.execute("SELECT course_id, title FROM courses")
        elif content_type == "modules":
            cursor.execute("SELECT module_id, title FROM modules")
        elif content_type == "tasks":
            cursor.execute("SELECT task_id, title FROM tasks")
        elif content_type == "final":
            cursor.execute("SELECT final_task_id, title FROM final_tasks")
        
        items = cursor.fetchall()

    builder = InlineKeyboardBuilder()
    for item_id, title in items:
        builder.button(
            text=title,
            callback_data=f"edit_select_{item_id}"
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_content_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminForm.edit_select_item)

@dp.callback_query(F.data.startswith("edit_select_"))
async def select_item(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[2])
    await state.update_data(item_id=item_id)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")
    builder.button(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
    builder.button(text="üñº –ú–µ–¥–∏–∞", callback_data="edit_media")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_content_type")
    builder.adjust(2, 1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "edit_title")
async def start_edit_title(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(AdminForm.edit_title)

@dp.message(AdminForm.edit_title)
async def process_edit_title(message: Message, state: FSMContext):
    data = await state.get_data()
    content_type = data['content_type']
    item_id = data['item_id']
    
    try:
        with db.cursor() as cursor:
            if content_type == "courses":
                cursor.execute("UPDATE courses SET title = %s WHERE course_id = %s", 
                             (message.text, item_id))
            elif content_type == "modules":
                cursor.execute("UPDATE modules SET title = %s WHERE module_id = %s", 
                             (message.text, item_id))
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
            
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data == "edit_description")
async def start_edit_description(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(AdminForm.edit_description)

@dp.message(AdminForm.edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    content_type = data['content_type']
    item_id = data['item_id']
    
    try:
        with db.cursor() as cursor:
            if content_type == "courses":
                cursor.execute("UPDATE courses SET description = %s WHERE course_id = %s", 
                             (message.text, item_id))
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
            
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
@dp.callback_query(F.data == "edit_media")
async def start_edit_media(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏:\n"
        "/keep - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ\n"
        "/remove - —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞"
    )
    await state.set_state(AdminForm.edit_media)

@dp.message(AdminForm.edit_media)
async def process_edit_media(message: Message, state: FSMContext):
    data = await state.get_data()
    content_type = data['content_type']
    item_id = data['item_id']
    
    media_id = None
    media_type = None
    
    if message.text == "/keep":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await message.answer("üîÑ –ú–µ–¥–∏–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    elif message.text == "/remove":
        media_id = None
        media_type = None
    elif message.content_type in ['photo', 'document']:
        if message.photo:
            media_id = message.photo[-1].file_id
            media_type = 'photo'
        else:
            media_id = message.document.file_id
            media_type = 'document'
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
        return
    
    try:
        with db.cursor() as cursor:
            if content_type == "courses":
                cursor.execute(
                    "UPDATE courses SET media_id = %s WHERE course_id = %s",
                    (media_id, item_id)
                )
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
            
        await message.answer("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
@dp.callback_query(F.data == "edit_content_menu")
async def back_to_edit_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –ö—É—Ä—Å—ã", callback_data="edit_content_courses")
    builder.button(text="üì¶ –ú–æ–¥—É–ª–∏", callback_data="edit_content_modules")
    builder.button(text="üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="edit_content_tasks")
    builder.button(text="üéì –ò—Ç–æ–≥–æ–≤—ã–µ", callback_data="edit_content_final")
    builder.button(text="üîô –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(2, 2)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "edit_content_type")
async def back_to_content_type(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await select_content_type(callback, state)

@dp.callback_query(F.data.startswith("select_"))
async def select_item(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")
    content_type = data[1]
    item_id = data[2]
    
    await state.update_data(
        content_type=content_type,
        item_id=item_id
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_action")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_action")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_content_{content_type}")  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query(F.data.in_(["edit_action", "delete_action"]))
async def handle_content_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    data = await state.get_data()
    content_type = data['content_type']
    
    try:
        if action == "edit_action":
            states = {
                "courses": AdminForm.edit_course,
                "modules": AdminForm.edit_module,
                "tasks": AdminForm.edit_task,
                "final": AdminForm.edit_final_task
            }
            await state.set_state(states[content_type])
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|file_id)\n"
                "–ü—Ä–∏–º–µ—Ä: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ|–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ|AgAC..."
            )
        
        elif action == "delete_action":
            await state.set_state(AdminForm.delete_confirmation)
            await callback.message.edit_text(
                "‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete"),
                        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
                    ]
                ])
            )
    
    except Exception as e:
        logger.error(f"Error in handle_content_action: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
@dp.message(AdminForm.edit_course)
async def process_edit_course(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if '|' not in message.text:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            
        parts = message.text.split('|', 2)
        title = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""
        file_id = parts[2].strip() if len(parts) > 2 else None
        
        with db.cursor() as cursor:
            cursor.execute('''
                UPDATE courses 
                SET title = %s, 
                    description = COALESCE(%s, description), 
                    media_id = COALESCE(%s, media_id) 
                WHERE course_id = %s
            ''', (title, description, file_id, data['item_id']))
            
        await message.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_content_management(message)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    finally:
        await state.clear()
        

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data == "confirm_delete")
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        with db.cursor() as cursor:
            content_type = data['content_type']
            item_id = data['item_id']
            
            tables = {
                "courses": ("courses", "course_id"),
                "modules": ("modules", "module_id"),
                "tasks": ("tasks", "task_id"),
                "final": ("final_tasks", "final_task_id")
            }
            
            table, column = tables[content_type]
            cursor.execute(f"DELETE FROM {table} WHERE {column} = %s", (item_id,))
            
            await callback.message.edit_text(f"‚úÖ {content_type[:-1].capitalize()} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
    finally:
        await state.clear()
        
@dp.callback_query(F.data == "edit_content_menu")
async def edit_content_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –ö—É—Ä—Å—ã", callback_data="edit_content_courses")
    builder.button(text="üì¶ –ú–æ–¥—É–ª–∏", callback_data="edit_content_modules")
    builder.button(text="üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="edit_content_tasks")
    builder.button(text="üéì –ò—Ç–æ–≥–æ–≤—ã–µ", callback_data="edit_content_final")
    builder.button(text="üîô –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    
@dp.message(AdminForm.add_task_media, F.content_type.in_({'document', 'photo'}))
async def process_task_media(message: Message, state: FSMContext):
    media = await handle_media(message)
    data = await state.get_data()
    
    with db.cursor() as cursor:
        cursor.execute(
            "INSERT INTO tasks (module_id, title, content, file_type, file_id) VALUES (%s, %s, %s, %s, %s)",
            (data['module_id'], data['title'], data['content'], media['type'], media['file_id'])
        )
    
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=admin_menu())
    await state.clear()

@dp.message(F.text == "üéì –î–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def add_final_task_start(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    builder = InlineKeyboardBuilder()
    for course in courses_for_modules():
        builder.button(text=course[1], callback_data=f"add_final_{course[0]}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("add_final_"))
async def process_final_task_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    await state.update_data(course_id=course_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_final_task_title)

@dp.message(AdminForm.add_final_task_title)
async def process_final_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_final_task_content)

@dp.message(AdminForm.add_final_task_content)
async def process_final_content(message: Message, state: FSMContext):
    await state.update_data(content=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_final_task_media)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.message(AdminForm.add_final_task_media)
async def process_final_media(message: Message, state: FSMContext):
    data = await state.get_data()
    media = await handle_media(message)
    
    try:
        with db.cursor() as cursor:
            cursor.execute('''
                INSERT INTO final_tasks 
                (course_id, title, content, file_id, file_type)
                VALUES (%s, %s, %s, %s, %s)
            ''', (
                data['course_id'],
                data['title'],
                data['content'],
                media['file_id'] if media else None,
                media['type'] if media else None
            ))
        await message.answer("‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=admin_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
    
    await state.clear()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
def generate_certificate(name: str, course: str) -> BytesIO:
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    style = ParagraphStyle(
        name='Center',
        parent=styles['Normal'],
        alignment=1,
        fontSize=20,
        leading=24
    )
    
    content = []
    content.append(Paragraph("–°–ï–†–¢–ò–§–ò–ö–ê–¢", style))
    content.append(Paragraph(f"–í—ã–¥–∞–Ω: {name}", style))
    content.append(Paragraph(f"–ó–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {course}", style))
    
    doc.build(content)
    buffer.seek(0)
    return buffer

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data.startswith("final_task_"))
async def handle_final_task(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    with db.cursor() as cursor:
        cursor.execute('''
            SELECT COUNT(t.task_id) = COUNT(s.task_id)
            FROM tasks t
            LEFT JOIN modules m ON t.module_id = m.module_id
            LEFT JOIN submissions s ON t.task_id = s.task_id 
                AND s.user_id = %s 
                AND s.status = 'accepted'
            WHERE m.course_id = %s
        ''', (user_id, course_id))
        all_completed = cursor.fetchone()[0]
        
        if not all_completed:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞!", show_alert=True)
            return
        
        cursor.execute('''
            SELECT title, content, file_id, file_type 
            FROM final_tasks 
            WHERE course_id = %s
        ''', (course_id,))
        final_task = cursor.fetchone()
        
    if not final_task:
        await callback.answer("‚ùå –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
        
    title, content, file_id, file_type = final_task
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if file_id and file_type:
        if file_type == 'photo':
            await callback.message.answer_photo(
                file_id,
                caption=f"üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}\n\n{content}"
            )
        else:
            await callback.message.answer_document(
                file_id,
                caption=f"üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}\n\n{content}"
            )
    else:
        await callback.message.answer(
            f"üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}\n\n{content}"
        )
    
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:")
    await state.set_state(TaskStates.waiting_for_final_solution)
    await state.update_data(course_id=course_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.message(TaskStates.waiting_for_final_solution)
async def process_final_solution(message: Message, state: FSMContext):
    data = await state.get_data()
    course_id = data['course_id']
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    file_type = None
    file_id = None
    content = None
    
    if message.document:
        file_type = 'document'
        file_id = message.document.file_id
    elif message.photo:
        file_type = 'photo'
        file_id = message.photo[-1].file_id
    else:
        content = message.text
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    with db.cursor() as cursor:
        cursor.execute('''
            INSERT INTO final_submissions 
            (user_id, course_id, content, file_id, file_type)
            VALUES (%s, %s, %s, %s, %s)
            RETURNING final_submission_id
        ''', (user_id, course_id, content, file_id, file_type))
        submission_id = cursor.fetchone()[0]
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await notify_admin_final(submission_id)
    await message.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await state.clear()

async def notify_admin_final(submission_id: int):
    with db.cursor() as cursor:
        cursor.execute('''
            SELECT fs.content, fs.file_id, fs.file_type,
                   u.full_name, c.title
            FROM final_submissions fs
            JOIN users u ON fs.user_id = u.user_id
            JOIN courses c ON fs.course_id = c.course_id
            WHERE fs.final_submission_id = %s
        ''', (submission_id,))
        data = cursor.fetchone()
        
    text = (f"üéì –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{submission_id}\n"
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {data[3]}\n"
            f"üìö –ö—É—Ä—Å: {data[4]}\n"
            f"üìù –†–µ—à–µ–Ω–∏–µ: {data[0] or '–ü—Ä–∏–ª–æ–∂–µ–Ω —Ñ–∞–π–ª'}")
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í—ã–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data=f"cert_yes_{submission_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cert_no_{submission_id}")
    
    if data[2] and data[1]:
        if data[2] == 'photo':
            await bot.send_photo(
                ADMIN_ID,
                data[1],
                caption=text,
                reply_markup=kb.as_markup()
            )
        else:
            await bot.send_document(
                ADMIN_ID,
                data[1],
                caption=text,
                reply_markup=kb.as_markup()
            )
    else:
        await bot.send_message(ADMIN_ID, text, reply_markup=kb.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@dp.callback_query(F.data.startswith("cert_"))
async def handle_cert_decision(callback: CallbackQuery):
    action, submission_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
    
    with db.cursor() as cursor:
        cursor.execute('''
            SELECT user_id, course_id 
            FROM final_submissions 
            WHERE final_submission_id = %s
        ''', (submission_id,))
        user_id, course_id = cursor.fetchone()
        
        cursor.execute('SELECT title FROM courses WHERE course_id = %s', (course_id,))
        course_title = cursor.fetchone()[0]
        
    if action == 'yes':
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        cert_buffer = generate_certificate(
            name=callback.from_user.full_name,
            course=course_title
        )
        cert_file = BufferedInputFile(cert_buffer.getvalue(), filename="certificate.pdf")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(
            user_id,
            cert_file,
            caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫—É—Ä—Å {course_title}!"
        )
        await callback.answer("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫—É—Ä—Å—É {course_title} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫."
        )
        await callback.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    await callback.message.delete()

@dp.message(AdminForm.add_task_media, Command('skip'))
async def process_task_media(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_menu())
        return
    
    data = await state.get_data()
    if message.text == "/skip":
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO tasks (module_id, title, content) VALUES (%s, %s, %s)",
                    (data['module_id'], data['title'], data['content'])
                )
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()
        return

    media = await handle_media(message)
    if media:
        try:
            with db.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO tasks (module_id, title, content, file_id, file_type) VALUES (%s, %s, %s, %s, %s)",
                    (data['module_id'], data['title'], data['content'], media['file_id'], media['type'])
                )
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ñ–∞–π–ª–æ–º!", reply_markup=admin_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip")
### BLOCK 9: UTILITY HANDLERS ###

@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    if str(callback.from_user.id) == ADMIN_ID:
        await callback.message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())
    else:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.callback_query(F.data.startswith("reject_"))
async def handle_reject(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É accept_
        data = callback.data.split('_')
        if len(data) != 3:
            raise ValueError(f"Invalid callback data: {callback.data}")
            
        _, submission_id_str, user_id_str = data
        
        submission_id = int(submission_id_str)
        student_id = int(user_id_str)
        
        with db.cursor() as cursor:
            cursor.execute('''
                UPDATE submissions 
                SET status = 'rejected'
                WHERE submission_id = %s
                RETURNING task_id
            ''', (submission_id,))
            
            result = cursor.fetchone()
            if not result:
                await callback.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            task_id = result[0]

            cursor.execute('SELECT title FROM tasks WHERE task_id = %s', (task_id,))
            task_title = cursor.fetchone()[0]
            db.conn.commit()

        await bot.send_message(
            student_id,
            f"üì¢ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é ¬´{task_title}¬ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå"
        )
        await callback.message.delete()
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        db.conn.rollback()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(TaskStates.waiting_final_solution)
async def process_final_solution(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        course_id = data.get('course_id')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
        if not db.is_course_completed(user_id, course_id):
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞!")
            await state.clear()
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
        file_id = None
        file_type = None
        content = message.text

        if message.document:
            file_id = message.document.file_id
            file_type = 'document'
        elif message.photo:
            file_id = message.photo[-1].file_id
            file_type = 'photo'

        with db.cursor() as cursor:
            cursor.execute('''
                INSERT INTO final_submissions 
                (user_id, course_id, content, file_id, file_type)
                VALUES (%s, %s, %s, %s, %s)
            ''', (user_id, course_id, content, file_id, file_type))

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await notify_admin_final_submission(user_id, course_id)
        
        await message.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è")

@dp.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await message.delete()

async def on_startup():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

async def on_shutdown():
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    db.close()
    await bot.session.close()

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
